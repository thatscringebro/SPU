@model SPU.Domain.Entites.Utilisateur
@using SPU.Domain.Entites
@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />

<div id="container">
	@switch(Model) {
		case Stagiaire stagiaireUser:
        <div class="main">
        <ul id="chat">
            @foreach (var message in stagiaireUser.chat.message)
            {
                <li class="@((message.Utilisateur.Id == Model.Id) ? "me" : "you")">
                    <div class="entete">
                        <h2>@message.Utilisateur.NomComplet</h2>
                        <h3>@message.dateHeure.ToString("h:mmtt, MMM d")</h3>
                    </div>
                    <div class="triangle"></div>
                    <div class="message">
                        @message.message
                    </div>
                </li>
            }
        </ul>
        <footer>
            <input type="text" placeholder="Votre message ici" id="messageInput" />
            <a id="sendButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                     class="bi bi-send" viewBox="0 0 16 16">
                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/>
                </svg>
            </a>
        </footer>
    </div>
        break;
    
    	case MDS mdsUser:
        // Now you can access MDS-specific properties or methods
        break;

    case Enseignant enseignantUser:
        // Now you can access Enseignant-specific properties or methods
        break;
	case Coordonateur coordoUser:
        <aside>
        <header>
            <input type="text" placeholder="search">
        </header>
        <ul>
            @foreach (var chat in coordoUser.chats)
            {
                <li>
                    <div>
                        <h2>@chat.Id</h2>
                    </div>
                </li>
            }
        </ul>
    	</aside>
        break;
	}
</div>

<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script>
  "use strict";

  var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

  //Disable the send button until connection is established.
  document.getElementById("sendButton").disabled = true;

  connection.on("ReceiveMessage", function (user, room, message) {
    var li = document.createElement("li");
    li.classList.add("me");
    document.getElementById("chat").appendChild(li);
    // We can assign user-supplied strings to an element's textContent because it
    // is not interpreted as markup. If you're assigning in any other way, you 
    // should be aware of possible script injection concerns.
    //li.textContent = `${user} says ${message} in room ${room}`;
    li.innerHTML = "<div class=\"entete\">Allo</div>";
  });

  connection.start().then(function () {
    document.getElementById("sendButton").disabled = false;
  }).catch(function (err) {
    return console.error(err.toString());
  });

  document.getElementById("sendButton").addEventListener("click", function (event) {
    var user = "me"//document.getElementById("userInput").value;
    var message = document.getElementById("messageInput").value;
    var room = "1";//document.getElementById("roomInput").valueiiii;

    if(message != null && message != ""){
      connection.invoke("SendMessage", user, room, message).catch(function (err) {
        return console.error(err.toString());
      });
    }
    event.preventDefault();
  }); 
</script>