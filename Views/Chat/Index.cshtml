@model SPU.Domain.Entites.Utilisateur
@using SPU.Domain.Entites
@using SPU.Domain
@{
    ViewData["Title"] = "Home Page";
    SpuContext context = new SpuContext();
    Coordonateur coordo = context.Coordonateurs.FirstOrDefault(x => x.UtilisateurId == Model.Id);
    Enseignant ens = context.Enseignants.FirstOrDefault(x => x.UtilisateurId == Model.Id); 
    Stagiaire stag = context.Stagiaires.FirstOrDefault(x => x.UtilisateurId == Model.Id);
    MDS mds = context.MDS.FirstOrDefault(x => x.UtilisateurId == Model.Id);
}

<link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />

<div id="container">
	@if(stag != null) {
      <div class="main_noaside">
        <ul id="chat">
          @{
            List<Message> messages = context.Message.Where(x => x.ChatId == stag.ChatId).ToList();
      }
          @foreach (var message in messages)
          {
              <li class="@((message.UtilisateurId == Model.Id) ? "me" : "you")">
                  <div class="entete">
                      <h2>@message.utilisateur.Nom</h2>
                      <h3>@message.DateHeure.ToString("h:mmtt, MMM d")</h3>
                  </div>
                  <div class="triangle"></div>
                  <div class="message">
                      @message.message
                  </div>
              </li>
          }
        </ul>
        <footer>
            <input type="text" placeholder="Votre message ici" id="messageInput" />
            <a id="sendButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                     class="bi bi-send" viewBox="0 0 16 16">
                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/>
                </svg>
            </a>
        </footer>
    </div>
  }	
  else if (coordo != null){
        <aside>
        <header>
            <input type="text" placeholder="search">
        </header>
        <ul>
      @{
        List<Chat> chats = context.Chats.Where(x => x.CoordonateurId == Model.Id).ToList();
      }
            @foreach (var chat in chats)
            {
                string idSelect = chat.Id.ToString() + "Select";
                <li onclick="setActiveChat('@chat.Id')" class="chatSelect" id="@idSelect">
                    <div>
                        <h2>@chat.Id</h2>
                    </div>
                </li>
            }
        </ul>
    	</aside>
  @foreach (var chat in chats) {
      <div class="main"><h1>Veuillez choisir un chat</h1></div>
      <div class="main hidden" id="@chat.Id">
        <ul id="chat">
      @{
            List<Message> messages = context.Message.Where(x => x.ChatId == chat.Id).ToList();
      }
            @foreach (var message in messages)
            {
                <li class="@((message.UtilisateurId == Model.Id) ? "me" : "you")">
                    <div class="entete">
                        <h2>@message.utilisateur.Nom</h2>
                        <h3>@message.DateHeure.ToString("h:mmtt, MMM d")</h3>
                    </div>
                    <div class="triangle"></div>
                    <div class="message">
                        @message.message
                    </div>
                </li>
            }
        </ul>
        <footer>
            @{
                string idMessageInput = chat.Id.ToString() + "messageInput";
                string idSendButton = chat.Id.ToString() + "sendButton";
            }
            <input type="text" placeholder="Votre message ici" id="@idMessageInput" />
            <a id="@idSendButton" onclick="sendMessage('@Model.Id', document.getElementById('@idMessageInput').value, '@chat.Id')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                     class="bi bi-send" viewBox="0 0 16 16">
                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/>
                </svg>
            </a>
        </footer>
    </div>
  }
  }
  else {
    <h1>Vous n'avez pas les permissions nécéssaire pour voir ce contenu</h1>
	}
</div>

<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script>
  "use strict";

  var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

  //Disable the send button until connection is established.
  document.getElementById("sendButton").disabled = true;

  connection.on("ReceiveMessage", function (user, room, message) {
    var li = document.createElement("li");
    li.classList.add("me");
    document.getElementById("chat").appendChild(li);
    // We can assign user-supplied strings to an element's textContent because it
    // is not interpreted as markup. If you're assigning in any other way, you 
    // should be aware of possible script injection concerns.
    //li.textContent = `${user} says ${message} in room ${room}`;
    li.innerHTML = "<div class=\"entete\">Allo</div>";
  });

  connection.start().then(function () {
    document.getElementById("sendButton").disabled = false;
  }).catch(function (err) {
    return console.error(err.toString());
  }); 

  function sendMessage(user, message, room){
    if(message != null && message != ""){
      connection.invoke("SendMessage", user, room, message).catch(function (err) {
        return console.error(err.toString());
      }); 
    }
  } 

  function setActiveChat(chatId) {
      $(".main").addClass("hidden");
      $("#" + chatId).removeClass("hidden");

      $(".chatSelect").removeClass("activeChat");
      $("#" + chatId + "Select").addClass("activeChat");
  }
</script>
