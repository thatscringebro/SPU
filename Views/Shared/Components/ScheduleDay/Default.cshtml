@using SPU.ViewModels;
@model List<JourneeTravailleVM>

@{
    int Annee = DateTime.Now.Year;
    DateTime dateDebut = DateTime.Now.AddDays(-DateTime.Now.DayOfWeek.GetHashCode()).Date;
    DateTime dateFin = DateTime.Now.AddDays(-DateTime.Now.DayOfWeek.GetHashCode() + 14).Date;
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<div style="display:flex">

    <div style="padding-top: 38px">
        @for (int i = 0; i <= 24; i++)
        {
            <p style="text-align:end; font-weight:bold; padding-right:5px;">@i:00 </p>
        }
    </div>
    <div class="horizontal-list">
        <ul>
            @for (DateTime journee = dateDebut; journee < dateFin; journee = journee.AddDays(1))
            {
                <li>
                    <div class="colonne @(journee.DayOfWeek == DayOfWeek.Saturday || journee.DayOfWeek == DayOfWeek.Sunday ? "fin-de-semaine" : "")">
                        <div class="date">
                            @switch (journee.DayOfWeek.ToString())
                            {
                                case "Monday":
                                    <p>Lundi</p>
                                    break;
                                case "Tuesday":
                                    <p>Mardi</p>
                                    break;
                                case "Wednesday":
                                    <p>Mercredi</p>
                                    break;
                                case "Thursday":
                                    <p>Jeudi</p>
                                    break;
                                case "Friday":
                                    <p>Vendredi</p>
                                    break;
                                case "Saturday":
                                    <p>Samedi</p>
                                    break;
                                case "Sunday":
                                    <p>Dimanche</p>
                                    break;
                            }

                            @switch (journee.Month)
                            {
                                case 1:
                                    <p class="jour-mois">@journee.Day.ToString() Janvier</p>
                                    break;
                                case 2:
                                    <p>@journee.Day.ToString() Février</p>
                                    break;
                                case 3:
                                    <p>@journee.Day.ToString() Mars</p>
                                    break;
                                case 4:
                                    <p>@journee.Day.ToString() Avril</p>
                                    break;
                                case 5:
                                    <p>@journee.Day.ToString() Mai</p>
                                    break;
                                case 6:
                                    <p>@journee.Day.ToString() Juin</p>
                                    break;
                                case 7:
                                    <p>@journee.Day.ToString() Juillet</p>
                                    break;
                                case 8:
                                    <p>@journee.Day.ToString() Août</p>
                                    break;
                                case 9:
                                    <p>@journee.Day.ToString() Septembre</p>
                                    break;
                                case 10:
                                    <p>@journee.Day.ToString() Octobre</p>
                                    break;
                                case 11:
                                    <p>@journee.Day.ToString() Novembre</p>
                                    break;
                                case 12:
                                    <p>@journee.Day.ToString() Décembre</p>
                                    break;
                            }
                        </div>
                        <div class="heures">
                            @for (int i = 0; i < 96; i++)
                            {
                                bool isWorkingHour = false;
                                bool Present = true;
                                Guid IdPlageHoraire = new Guid();
                                foreach (var item in Model)
                                {
                                    // Convertir la date de début et de fin du quart en minutes
                                    int debutQuartMinutes = item.DateDebutQuart.Hour * 60 + item.DateDebutQuart.Minute;
                                    int finQuartMinutes = item.DateFinQuart.Hour * 60 + item.DateFinQuart.Minute;

                                    // Si le quart de travail commence et se termine le même jour
                                    if (item.DateDebutQuart.Date == item.DateFinQuart.Date)
                                    {
                                        // Vérifier si l'heure actuelle se trouve entre l'heure de début et de fin du quart de travail
                                        if (item.DateDebutQuart.Date == journee.Date && debutQuartMinutes <= i * 15 && i * 15 < finQuartMinutes)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;
                                            if (item.Present == false)
                                                Present = false;

                                            break;
                                        }
                                    }
                                    else // Si le quart de travail commence un jour et se termine le lendemain
                                    {
                                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le premier jour
                                        if (item.DateDebutQuart.Date == journee.Date && debutQuartMinutes <= i * 15)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;
                                            if (item.Present == false)
                                                Present = false;

                                            break;
                                        }
                                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le dernier jour
                                        if (item.DateFinQuart.Date == journee.Date && i * 15 < finQuartMinutes)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;
                                            if (item.Present == false)
                                                Present = false;

                                            break;
                                        }
                                    }
                                }

                                // Appliquer le style en fonction de la condition isWorkingHour
                                <div class="quartHeure @(isWorkingHour ? "idPlageHoraire-" + IdPlageHoraire.ToString() : "")" style="height: 5.266666px; @(isWorkingHour ? (Present ? "background-color: lightblue;" : "background-color: lightgrey;") : "") @(i % 4 == 3 ? "border-bottom: 1px solid lightgrey;" : "")">
                                </div>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>
<div style="width:100%; text-align:center;">
    <button class="btn-precedent" onclick="precedent()">Semaine précédente</button>
    <button class="btn-suivant" onclick="suivant()">Semaine suivante</button>
</div>

<style>
    .fin-de-semaine {
        border: 3px solid black !important;
    }
    .btn-precedent {
        border-radius: 20px 0 0 20px;
        border: none;
        padding: 5px;
        padding-left: 15px;
        padding-right: 15px;
        background-color: lightblue;
    }

    .btn-suivant {
        border-radius: 0 15px 15px 0;
        border: none;
        padding: 5px;
        padding-left: 20px;
        padding-right: 20px;
        background-color: lightblue;
    }

    .date {
        text-align: center;
        color: black;
        border-bottom: 1px solid grey;
    }

    .jour-mois, p {
        font-size: 12px;
        margin-bottom: 3px;
    }

    .colonne {
        width: 100px;
        height: 550px;
        border: 1px solid grey;
        border-radius: 5px;
        margin: 3px;
        display: flex;
        flex-direction: column;
    }

    .horizontal-list {
        overflow-x: auto;
        white-space: nowrap;
    }

        .horizontal-list ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            display: inline-flex;
        }

    .heures {
        flex-grow: 1;
        border-top: 1px solid lightgrey;
        display: flex;
        flex-direction: column;
        overflow: hidden
    }
</style>

<script>
    var dateDebut = new Date('@dateDebut.ToString("yyyy-MM-ddTHH:mm:ss")');
    var dateFin = new Date('@dateFin.ToString("yyyy-MM-ddTHH:mm:ss")');

    function afficherSemaine(dateDebut, dateFin) {
        // Sélectionne l'élément <ul> dans lequel les jours seront affichés
        var ulElement = document.querySelector('.horizontal-list ul');

        // Vide le contenu de l'élément <ul> pour afficher les nouveaux jours
        ulElement.innerHTML = '';

        // Boucle à travers chaque jour entre dateDebut et dateFin
        for (var currentDate = new Date(dateDebut); currentDate <= dateFin; currentDate.setDate(currentDate.getDate() + 1)) {
            // Crée un nouvel élément <li> pour chaque jour
            var liElement = document.createElement('li');

            // Ajoute une classe "colonne" à l'élément <li>
            liElement.classList.add('colonne');

            // Crée un nouvel élément <div> pour afficher la date
            var dateDiv = document.createElement('div');
            dateDiv.classList.add('date');

            // Ajoute le nom du jour de la semaine à la dateDiv
            var dayName = currentDate.toLocaleDateString('fr-FR', { weekday: 'long' });
            var dayParagraph = document.createElement('p');
            dayParagraph.textContent = dayName.charAt(0).toUpperCase() + dayName.slice(1);
            dateDiv.appendChild(dayParagraph);

            // Ajoute la date du mois à la dateDiv
            var dateParagraph = document.createElement('p');
            dateParagraph.textContent = currentDate.getDate() + ' ' + moisEnFrancais(currentDate.getMonth() + 1);
            dateDiv.appendChild(dateParagraph);

            // Ajoute la dateDiv à l'élément <li>
            liElement.appendChild(dateDiv);

            // Crée un nouvel élément <div> pour afficher les heures
            var heuresDiv = document.createElement('div');
            heuresDiv.classList.add('heures');

            // Ajoute les 96 quarts d'heure à l'élément <div> des heures
            for (var i = 0; i < 96; i++) {
                let isWorkingHour = false; // Variable pour vérifier si l'heure est pendant le quart de travail
                let IdPlageHoraire = '';

                for (let i = 0; i < Model.length; i++) {
                    const item = Model[i];

                    // Convertir la date de début et de fin du quart en minutes
                    const debutQuartMinutes = item.DateDebutQuart.getHours() * 60 + item.DateDebutQuart.getMinutes();
                    const finQuartMinutes = item.DateFinQuart.getHours() * 60 + item.DateFinQuart.getMinutes();

                    // Si le quart de travail commence et se termine le même jour
                    if (item.DateDebutQuart.toDateString() === item.DateFinQuart.toDateString()) {
                        // Vérifier si l'heure actuelle se trouve entre l'heure de début et de fin du quart de travail
                        if (item.DateDebutQuart.toDateString() === journee.toDateString() && debutQuartMinutes <= i * 15 && i * 15 < finQuartMinutes) {
                            isWorkingHour = true;
                            IdPlageHoraire = item.Id;
                            break;
                        }
                    } else { // Si le quart de travail commence un jour et se termine le lendemain
                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le premier jour
                        if (item.DateDebutQuart.toDateString() === journee.toDateString() && debutQuartMinutes <= i * 15) {
                            isWorkingHour = true;
                            IdPlageHoraire = item.Id;
                            break;
                        }
                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le dernier jour
                        if (item.DateFinQuart.toDateString() === journee.toDateString() && i * 15 < finQuartMinutes) {
                            isWorkingHour = true;
                            IdPlageHoraire = item.Id;
                            break;
                        }
                    }
                }

                // Appliquer le style en fonction de la condition isWorkingHour
                const quartHeureElement = document.createElement('div');
                quartHeureElement.classList.add('quartHeure');
                quartHeureElement.style.height = '5.266666px';
                if (isWorkingHour) {
                    quartHeureElement.classList.add('idPlageHoraire-' + IdPlageHoraire);
                    quartHeureElement.style.backgroundColor = 'lightblue';
                }
                if (i % 4 === 3) {
                    quartHeureElement.style.borderBottom = '1px solid lightgrey';
                }

                // Ajouter l'élément quartHeure à la page ou au conteneur approprié
                // Remplacez document.body par le conteneur approprié si nécessaire
                document.body.appendChild(quartHeureElement);
            }

            // Ajoute les heuresDiv à l'élément <li>
            liElement.appendChild(heuresDiv);

            // Ajoute le <li> à l'élément <ul>
            ulElement.appendChild(liElement);
        }
    }

    // Fonction pour convertir un mois en français
    function moisEnFrancais(mois) {
        switch (mois) {
            case 1: return 'Janvier';
            case 2: return 'Février';
            case 3: return 'Mars';
            case 4: return 'Avril';
            case 5: return 'Mai';
            case 6: return 'Juin';
            case 7: return 'Juillet';
            case 8: return 'Août';
            case 9: return 'Septembre';
            case 10: return 'Octobre';
            case 11: return 'Novembre';
            case 12: return 'Décembre';
            default: return '';
        }
    }

    function precedent() {
        dateDebut.setDate(dateDebut.getDate() - 14);
        dateFin.setDate(dateFin.getDate() - 14);
        afficherSemaine(dateDebut, dateFin);
    }

    function suivant() {
        dateDebut.setDate(dateDebut.getDate() + 14);
        dateFin.setDate(dateFin.getDate() + 14);
        afficherSemaine(dateDebut, dateFin);
    }

    async function afficherAlerte(idPlageHoraire) {
        try {
            const response = await fetch('/Horaire/ObtenirInfoPlageHoraire?Id=' + idPlageHoraire);
            if (!response.ok) {
                throw new Error('Erreur lors de la récupération des informations de la plage horaire');
            }
            const data = await response.json();

            console.log('Informations de la plage horaire :', data);

            const debutQuart = new Date(data.dateDebutQuart);
            const finQuart = new Date(data.dateFinQuart);

            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const debutQuartFormatte = debutQuart.toLocaleDateString('fr-FR', options);
            const finQuartFormatte = finQuart.toLocaleDateString('fr-FR', options);

            const debutHeureMinutes = debutQuart.getHours().toString().padStart(2, '0') + ':' + debutQuart.getMinutes().toString().padStart(2, '0');
            const finHeureMinutes = finQuart.getHours().toString().padStart(2, '0') + ':' + finQuart.getMinutes().toString().padStart(2, '0');

            Swal.fire({
                title: 'Vous serez absent ?',
                text: `Voulez-vous cocher absent entre le ${debutQuartFormatte} à ${debutHeureMinutes} et le ${finQuartFormatte} à ${finHeureMinutes} ?`,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Je serai absent',
                cancelButtonText: 'Annuler',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const response = await fetch('/Horaire/MettreAbsent?Id=' + idPlageHoraire);
                    if (!response.ok) {
                        throw new Error('Erreur lors de la modification de la plage horaire');
                    }
                    location.reload();
                }
            });

        } catch (error) {
            console.error('Erreur:', error);
            Swal.fire('Erreur!', 'Une erreur est survenue lors de la récupération des informations de la plage horaire.', 'error');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        var divsQuartHeure = document.querySelectorAll('.quartHeure');

        divsQuartHeure.forEach(function (div) {
            var classes = div.classList;
            for (var i = 0; i < classes.length; i++) {
                var match = classes[i].match(/^idPlageHoraire-(.*)$/);
                if (match) {
                    var idPlageHoraire = match[1];
                    div.addEventListener("click", function () {

                        afficherAlerte(idPlageHoraire);
                    });
                    break;
                }
            }
        });
    });
</script>