@using SPU.ViewModels;
@model List<JourneeTravailleVM>

@{
    int Annee = DateTime.Now.Year;
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="horizontal-list">
    <ul>
        @for (int mois = 1; mois <= 12; mois++)
        {
            @for (int jour = 1; jour <= DateTime.DaysInMonth(Annee, mois); jour++)
            {
                DateTime journee = new DateTime(Annee, mois, jour);
                <li>
                    <div class="colonne">
                        <div class="date">
                            @switch (journee.DayOfWeek.ToString())
                            {
                                case "Monday":
                                    <p>Lundi</p>
                                    break;
                                case "Tuesday":
                                    <p>Mardi</p>
                                    break;
                                case "Wednesday":
                                    <p>Mercredi</p>
                                    break;
                                case "Thursday":
                                    <p>Jeudi</p>
                                    break;
                                case "Friday":
                                    <p>Vendredi</p>
                                    break;
                                case "Saturday":
                                    <p>Samedi</p>
                                    break;
                                case "Sunday":
                                    <p>Dimanche</p>
                                    break;
                            }

                            @switch (journee.Month)
                            {
                                case 1:
                                    <p class="jour-mois">@journee.Day.ToString() Janvier</p>
                                    break;
                                case 2:
                                    <p>@journee.Day.ToString() Février</p>
                                    break;
                                case 3:
                                    <p>@journee.Day.ToString() Mars</p>
                                    break;
                                case 4:
                                    <p>@journee.Day.ToString() Avril</p>
                                    break;
                                case 5:
                                    <p>@journee.Day.ToString() Mai</p>
                                    break;
                                case 6:
                                    <p>@journee.Day.ToString() Juin</p>
                                    break;
                                case 7:
                                    <p>@journee.Day.ToString() Juillet</p>
                                    break;
                                case 8:
                                    <p>@journee.Day.ToString() Août</p>
                                    break;
                                case 9:
                                    <p>@journee.Day.ToString() Septembre</p>
                                    break;
                                case 10:
                                    <p>@journee.Day.ToString() Octobre</p>
                                    break;
                                case 11:
                                    <p>@journee.Day.ToString() Novembre</p>
                                    break;
                                case 12:
                                    <p>@journee.Day.ToString() Décembre</p>
                                    break;
                            }
                        </div>
                        <div class="heures">
                            @for (int i = 0; i < 96; i++)
                            {
                                bool isWorkingHour = false; // Variable pour vérifier si l'heure est pendant le quart de travail
                                Guid IdPlageHoraire = new Guid();
                                foreach (var item in Model)
                                {
                                    // Convertir la date de début et de fin du quart en minutes
                                    int debutQuartMinutes = item.DateDebutQuart.Hour * 60 + item.DateDebutQuart.Minute;
                                    int finQuartMinutes = item.DateFinQuart.Hour * 60 + item.DateFinQuart.Minute;

                                    // Si le quart de travail commence et se termine le même jour
                                    if (item.DateDebutQuart.Date == item.DateFinQuart.Date)
                                    {
                                        // Vérifier si l'heure actuelle se trouve entre l'heure de début et de fin du quart de travail
                                        if (item.DateDebutQuart.Date == journee.Date && debutQuartMinutes <= i * 15 && i * 15 < finQuartMinutes)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;

                                            break;
                                        }
                                    }
                                    else // Si le quart de travail commence un jour et se termine le lendemain
                                    {
                                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le premier jour
                                        if (item.DateDebutQuart.Date == journee.Date && debutQuartMinutes <= i * 15)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;

                                            break;
                                        }
                                        // Vérifier si l'heure actuelle est pendant le quart de travail sur le dernier jour
                                        if (item.DateFinQuart.Date == journee.Date && i * 15 < finQuartMinutes)
                                        {
                                            isWorkingHour = true;
                                            IdPlageHoraire = item.Id;

                                            break;
                                        }
                                    }
                                }

                                // Appliquer le style en fonction de la condition isWorkingHour
                                <div class="quartHeure @(isWorkingHour ? "idPlageHoraire-" + IdPlageHoraire.ToString() : "")" style="height: 5.266666px; @(isWorkingHour ? "background-color: lightblue;" : "") @(i % 4 == 3 ? "border-bottom: 1px solid lightgrey;" : "")">
                                </div>
                            }
                        </div>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<style>
    .date {
        text-align: center;
        color: black;
        border-bottom: 1px solid grey;
    }

    .jour-mois, p {
        font-size: 12px;
        margin-bottom: 3px;
    }

    .colonne {
        width: 100px;
        height: 550px;
        border: 1px solid grey;
        border-radius: 5px;
        margin: 3px;
        display: flex;
        flex-direction: column;
    }

    .horizontal-list {
        overflow-x: auto;
        white-space: nowrap;
    }

        .horizontal-list ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            display: inline-flex;
        }

    .heures {
        flex-grow: 1;
        border-top: 1px solid lightgrey;
        display: flex;
        flex-direction: column;
        overflow: hidden
    }
</style>

<script>
    function afficherAlerte(idPlageHoraire) {

        try {
            const response = await fetch('/Horaire/ObtenirInfoPlageHoraire?Id=' + idPlageHoraire);
            if (!response.ok) {
                throw new Error('Erreur lors de la récupération des informations de la plage horaire');
            }
            const data = await response.json();

            console.log('Informations de la plage horaire :', data);

            Swal.fire({
                title: 'Vous serez absent ?',
                text: 'Voulez-vous cocher absent entre le ' + data.DateDebutQuart.Day + ' ' + data.DateDebutQuart.Month + ' à ' + data.DateDebutQuart.Hour + ':' + data.DateDebutQuart.Minute + ' et le ' + data.DateFinQuart.Day + ' ' + data.DateFinQuart.Month + ' à ' + data.DateFinQuart.Hour + ':' + data.DateFinQuart.Minute + ' ?',
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Je serai absent',
                cancelButtonText: 'Annuler',
            }).then((result) => {
                if (result.isConfirmed) {
                    const response = await fetch('/Horaire/MettreAbsent?Id=' + idPlageHoraire);
                    if (!response.ok) {
                        throw new Error('Erreur lors de la modification de la plage horaire');
                    }
                    location.reload();
                }
            });

        } catch (error) {
            console.error('Erreur:', error);
            Swal.fire('Erreur!', 'Une erreur est survenue lors de la récupération des informations de la plage horaire.', 'error');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        var divsQuartHeure = document.querySelectorAll('.quartHeure');

        divsQuartHeure.forEach(function (div) {
            var classes = div.classList;
            for (var i = 0; i < classes.length; i++) {
                var match = classes[i].match(/^idPlageHoraire-(.*)$/);
                if (match) {
                    var idPlageHoraire = match[1];
                    div.addEventListener("click", function () {

                        afficherAlerte(idPlageHoraire);
                    });
                    break;
                }
            }
        });
    });
</script>