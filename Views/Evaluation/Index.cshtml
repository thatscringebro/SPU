@model SPU.Domain.Entites.Utilisateur
@using SPU.Domain.Entites
@using SPU.Domain

@{
    ViewData["Title"] = "Home Page";
    SpuContext context = new SpuContext();
    Coordonnateur coordo = context.Coordonnateurs.FirstOrDefault(x => x.UtilisateurId == Model.Id);
    Enseignant ens = context.Enseignants.FirstOrDefault(x => x.UtilisateurId == Model.Id); 
    Stagiaire stag = context.Stagiaires.FirstOrDefault(x => x.UtilisateurId == Model.Id);
    MDS mds = context.MDS.FirstOrDefault(x => x.UtilisateurId == Model.Id);
}

<link rel="stylesheet" href="~/css/evaluation.css" asp-append-version="true" />

<div class="text-center">
    <h1 class="display-4">Évaluations</h1>
    @if(coordo != null) {
      <h2>Veuillez vous connecter avec votre compte enseignant</h2>
    } else if (ens != null) {
      List<Evaluation> evals = context.Evaluations.Where(x => x.EnseignantId == ens.Id).OrderBy(x => x.lienGoogleForm).ToList();
      var groupedEvals = evals.GroupBy(x => x.lienGoogleForm)
                        .Select(group => new {
                            LienGoogleForm = group.Key,
                            QuantiteConsulte = group.Sum(x => x.consulter ? 1 : 0),
                            QuantiteActif = group.Sum(x => x.actif ? 1 : 0)
                        }).ToList();

      <button id="addEvaluationBtn" class="btn btn-success">Ajouter une évaluation</button>
      <table class="table">
        <thead>
          <tr>
            <th>Actions</th>
            <th>Lien externe</th>
            <th>Nombre consulté</th>
            <th>Nombre actif</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var eval in groupedEvals)
          {
            <tr>
              <td>
                <button class="actionIcon" onclick="openEvaluationsModal('@eval.LienGoogleForm')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard2-check" viewBox="0 0 16 16">
                <path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5z"/>
                <path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5z"/>
                <path d="M10.854 7.854a.5.5 0 0 0-.708-.708L7.5 9.793 6.354 8.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/>
                </svg>
                </button>
                | 
                <button class="redhover actionIcon" onclick="deleteEval('@eval.LienGoogleForm')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                </svg>
                </button>
              </td>
              <td><a href="@eval.LienGoogleForm">@eval.LienGoogleForm</a></td>
              <td>@eval.QuantiteConsulte / @evals.Where(x => x.lienGoogleForm == eval.LienGoogleForm).ToList().Count</td>
              <td>@eval.QuantiteActif / @evals.Where(x => x.lienGoogleForm == eval.LienGoogleForm).ToList().Count</td>
            </tr>
          } 
        </tbody>
      </table>

      <!-- Modal Create -->
      <div class="modal modalCreate" tabindex="-1" role="dialog" id="addEvaluationModal">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Nouvelle évaluation</h5> 
            </div>
            <div class="modal-body">
              <form id="evaluationForm">
                <div class="form-group">
                  <label for="evaluationUrl">URL de l'évaluation</label>
                  <input type="text" class="form-control" id="evaluationUrl">
                </div>
                <div class="form-group">
                  <label for="stagiaireOrMDS">Stagiaire ou MDS?</label>
                  <br/>
                  <input type="radio" id="stagiaireRadio" name="stagiaireOrMDS" value="stagiaire">
                  <label for="stagiaireRadio">Stagiaire</label>
                  <br/>
                  <input type="radio" id="mdsRadio" name="stagiaireOrMDS" value="mds">
                  <label for="mdsRadio">MDS</label>
                </div>
                <div class="form-group">
                  <label for="evaluationActif">Évaluation active?</label>
                  <input type="checkbox" id="evaluationActif">
                </div>
                <button type="submit" class="btn btn-primary">Créer évaluation</button>
              </form>
          </div>
          </div>
        </div>
      </div>

      <!-- Add a modal for showing evaluations -->
<div class="modal modalEvaluation" tabindex="-2" role="dialog" id="showEvaluationsModal">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Activation de l'évaluation pour les étudiants suivants</h5> 
      </div>
      <div class="modal-body">
        <form id="evaluationStatusForm">
          <div id="evaluationList"></div>
          <button type="submit" class="btn btn-primary">Sauvegarder</button>
        </form>
      </div>
    </div>
  </div>
</div>

      
      <script>
        document.getElementById('addEvaluationBtn').addEventListener('click', function() {
          $('#addEvaluationModal').modal('show');
        });

        function openEvaluationsModal(url) {
            // Call the server to get evaluations with the same URL
            $.ajax({
              type: 'GET',
              url: '@Url.Action("GetEvaluationsByURL", "Evaluation")',
              data: { url: url },
              success: function(data) {
                // Populate modal with evaluations
                var evaluationList = $('#evaluationList');
                evaluationList.empty();
                data.value.data.forEach(function(evaluation) {
                  // Append list item with checkbox
                  evaluationList.append('<div class="row"><input class="col-1" type="checkbox" name="evaluations" value="' + evaluation.id + '" ' + (evaluation.actif ? 'checked' : '') + '>' + (evaluation.MDSId1 == null ?evaluation.stagiaire.utilisateur.nomComplet : evaluation.mds.utilisateur.nomComplet) + '</div>');
                });
                // Show the modal
                $('#showEvaluationsModal').modal('show');
              },
              error: function(xhr, status, error) {
                console.error('Failed to retrieve evaluations:', error);
              }
            });
          }

        function deleteEval(lien){
          Swal.fire({
            title: "Êtes-vous sûr?",
            text: "La suppression de l'évaluation est permanente!",
            showCancelButton: true,
            confirmButtonColor: '#DD6B55',
            confirmButtonText: 'Oui, supprimer!',
            cancelButtonText: "Non, annuler!",
          }).then((result) => 
          {
            if (result.isConfirmed){ 
              $.ajax({
              type: 'POST',
              url: '@Url.Action("Delete", "Evaluation")',
              data: { lien: lien },
              success: function(data) {
                Swal.fire("Supprimé", "L'évaluation a été supprimée", "success")
                .then((value) => {
                  location.reload();
                });
              },
              error: function(xhr, status, error) {
                Swal.fire("Erreur", "Une erreur est survenue!", "error")
                .then((value) => {
                  location.reload();
                });
              }
            });
            } else {
              Swal.fire("Annulé", "Votre évaluation est en suretée :)", "error");
            }
          });
        }

        document.addEventListener("DOMContentLoaded", (event) => {
          $('#evaluationForm').submit(function(event) {
            event.preventDefault();
      
            var lienGoogleForm = $('#evaluationUrl').val();
            var estStagiaire = $('#stagiaireRadio').is(':checked');
            var actif = $('#evaluationActif').is(':checked');

            $.ajax({
              type: 'POST',
              url: '@Url.Action("Create", "Evaluation")',
              data: { lienGoogleForm: lienGoogleForm, actif: actif, estStagiaire: estStagiaire },
              success: function(data) {
                console.log('Evaluation created successfully');
                location.reload();
              },
              error: function(xhr, status, error) {
                console.error('Failed to create evaluation:', error);
              }
            });
          });

          $('#evaluationStatusForm').submit(function(event) {
            event.preventDefault();
            $('input[name="evaluations"]').each(function() {
              $.ajax({
                type: 'POST',
                url: '@Url.Action("setActif", "Evaluation")',
                data: { idEval: $(this).val(), status: $(this).is(':checked') },
                success: function(data) {
                  location.reload();
                },
                error: function(xhr, status, error) {
                  console.error('Failed:', error);
                }
              });
            });


          });
        });
      </script>
    }
    else if(stag != null){
      List<Evaluation> evals = context.Evaluations.Where(x => x.StagiaireId == stag.Id && x.actif == true).OrderBy(x => x.lienGoogleForm).ToList();
      <table class="table">
        <thead>
          <tr>
            <th>Statut</th>
            <th>Lien externe</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var eval in evals)
          {
            <tr>
              <td>@(eval.consulter ? "Consulté" : "Non-consulté")</td>
              <td onclick="setConsultation('@eval.Id', '@eval.lienGoogleForm')">@eval.lienGoogleForm</td>
            </tr>
          }
        </tbody>
      </table>
      <script>
      function setConsultation(idEval, url){
        $.ajax({
          type: 'POST',
          url: '@Url.Action("setConsultation", "Evaluation")',
          data: { idEval: idEval, status: true },
          success: function(data) {
            open(url);
          },
          error: function(xhr, status, error) {
            console.error('Failed:', error);
          }
        });
      }
      </script>
    }
    else if(mds != null){
      List<Evaluation> evals = context.Evaluations.Where(x => x.MDSId1 == mds.Id && x.actif == true).OrderBy(x => x.lienGoogleForm).ToList();
      <table class="table">
        <thead>
          <tr>
            <th>Statut</th>
            <th>Lien externe</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var eval in evals)
          {
            <tr>
              <td>@(eval.consulter ? "Consulté" : "Non-consulté")</td>
              <td onclick="setConsultation('@eval.Id', '@eval.lienGoogleForm')">@eval.lienGoogleForm</td>
            </tr>
          }
        </tbody>
      </table>
      <script>
      function setConsultation(idEval, url){
        $.ajax({
          type: 'POST',
          url: '@Url.Action("setConsultation", "Evaluation")',
          data: { idEval: idEval, status: true },
          success: function(data) {
            open(url);
          },
          error: function(xhr, status, error) {
            console.error('Failed:', error);
          }
        });
      }
      </script>
    }
</div>
